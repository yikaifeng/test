//**********************************************************
"use strict";
//**********************************************************
//n - number
//	dte - date
//s - string 
//b - boolean 
//o - object
//	arr - array
//l - library
//f - field
//======================================================
//–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏–º–µ–Ω–∞)
//======================================================

//–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
const LANALYTICS = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞";

//–ü–æ–ª—è
const LANALYTICS_FLD {
	PERIOD: "–ü–µ—Ä–∏–æ–¥",
	STARTDATE: "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
	REPORT: "–û—Ç—á—ë—Ç",
	INCOME: "–í—ã–≤–æ–¥ –ø—Ä–∏—Ö–æ–¥–∞",
	OUTCOME: "–í—ã–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–∞",
	BALANCE: "–í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞",
};

//–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–ª–∞—Ç–µ–∂–∏
const LPAYMENTS = "–ü–ª–∞—Ç–µ–∂–∏2";

//–ò–∫–æ–Ω–∫–∏
const LPAYMENTS_ICO = {
	//–≤ –ø–æ–ª—è—Ö
	PLUS: "‚ûï",
	MINUS: "‚ûñ",
	TRANSACTION: "üí±",
	//–≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
	//–ò–∫–æ–Ω–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞
	SALARY: "üíµ",
	ADD_INCOME: "üí∏",
	//–ò–∫–æ–Ω–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞
	FOOD: "üçú",
	SERVICE: "üè†",
	TRANSPORT: "üöå",
	REST: "üßòüèº‚Äç‚ôÄÔ∏è",
	THINGS: "üì¶",
	HEALTH: "üè•",
	//–û–±—â–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
	CORRECTION: "üßÆ",
	OTHER: "üè∑Ô∏è",
};
Object.freeze(ICON);
	
//–ü–æ–ª—è
const LPAYMENTS_FLD = {
	DATE: "–î–∞—Ç–∞",
	TYPE: "–¢–∏–ø",
	ACCOUNT: "–°—á—ë—Ç",
	DESTINATION: "–ü–µ—Ä–µ–≤–µ–ª–µ–Ω–æ –Ω–∞",
	INC_CATEGORY: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è " + LPAYMENTS_ICO.PLUS,
	INCOME: "–ü—Ä–∏—Ö–æ–¥",
	OUT_CATEGORY: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è " + LPAYMENTS_ICO.MINUS,
	OUTCOME: "–†–∞—Å—Ö–æ–¥",
	TRANSACTION: "–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
	NAME: "–ù–∞–∑–≤–∞–Ω–∏–µ",
};
Object.freeze(FLD);

//–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
const LPAYMENTS_VAL = {
		
	INCOME: LPAYMENTS_ICO.PLUS + " –ø—Ä–∏—Ö–æ–¥",
	OUTCOME: LPAYMENTS_ICO.MINUS + " —Ä–∞—Å—Ö–æ–¥",
	TRANSACTION: LPAYMENTS_ICO.TRANSACTION + " –ø–µ—Ä–µ–≤–æ–¥",
		
	SALARY: LPAYMENTS_ICO.SALARY + " –∑–∞—Ä–ø–ª–∞—Ç–∞",
	ADD_INCOME: LPAYMENTS_ICO.ADD_INCOME + " –¥–æ–ø.–¥–æ—Ö–æ–¥",

	FOOD: LPAYMENTS_ICO.FOOD + " –ø–∏—Ç–∞–Ω–∏–µ",
	SERVICE: LPAYMENTS_ICO.SERVICE + " —Å–æ—Ü.—É—Å–ª—É–≥–∏",
	TRANSPORT: LPAYMENTS_ICO.TRANSPORT + " —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
	REST: LPAYMENTS_ICO.REST + " –¥–æ—Å—É–≥",
	THINGS: LPAYMENTS_ICO.THINGS + " –≤–µ—â–∏",
	HEALTH: LPAYMENTS_ICO.HEALTH + " –∑–¥–æ—Ä–æ–≤—å–µ",

	CORRECTION: LPAYMENTS_ICO.CORRECTION + " –∫–æ—Ä—Ä–µ–∫—Ç.",
	OTHER: LPAYMENTS_ICO.OTHER + " –ø—Ä–æ—á–µ–µ",		
};
Object.freeze(VAL);


//======================================================
//–û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
//======================================================
const Edit = {};
	
	//–ü–æ–ª—É—á–∏—Ç –∏–∫–æ–Ω–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
	Edit.getIcon = function(sSource) {
		if (typeof(sSource) != string) {
			return null;
		} else {
			var separator = " ";
			sSource = String(sSource);
			return sSource.split(separator,1)[0];
		}
	}
	
	//–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–∫–æ–Ω–∫–∏
	Edit.getName = function(sSource) {	
		if (typeof(sSource) != string) {
			return null;
		} else {
			var separator = " ";
			strSource = String(strSource);
			var strIcon = strSource.split(separator,1)[0];
			var strName = strSource.slice(strIcon.length);
			return strName = strName.trim();
		}
	}
	
	//–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
	Edit.getMoney = function (nSum, sCurrency) {
		if (typeof(nSum) != number) {
			return null;
			exit();
		} else {
			var sign = "";
			nSum = nSum.toFixed(2);
			if (nSum < 0) {
				sign = "-";
				nSum = Math.abs(nSum);
				nSum = nSum.toFixed(2);
			}
			nSum +=¬†"";
			nSum =¬†new¬†Array(4 - nSum.length % 3).join("U") + nSum;
			nSum = nSum.replace(/([0-9U]{3})/g,¬†"$1 ").replace(/U/g,¬†"");
			nSum = sign + nSum;
			nSum = nSum.trim();
			if (typeof(sCurrency) == string && sCurrency != undefined) {
				return nSum + " " + sCurrency;
			} else {
				return nSum;
			}		
		}	
	}
	
	//–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
	Edit.getMonthName = function (nMonthNumber) {
		
		switch (nMonthNumber) {
			case 1:
				return "—è–Ω–≤–∞—Ä—å";
				break;
			case 2:
				return "—Ñ–µ–≤—Ä–∞–ª—å";
				break;
			case 3:
				return "–º–∞—Ä—Ç";
				break;
			case 4:
				return "–∞–ø—Ä–µ–ª—å";
				break;
			case 5:
				return "–º–∞–π";
				break;
			case 6:
				return "–∏—é–Ω—å";
				break;
			case 7:
				return "–∏—é–ª—å";
				break;
			case 8:
				return "–∞–≤–≥—É—Å—Ç";
				break;
			case 9:
				return "—Å–µ–Ω—Ç—è–±—Ä—å";
				break;
			case 10:
				return "–æ–∫—Ç—è–±—Ä—å";
				break;
			case 11:
				return "–Ω–æ—è–±—Ä—å";
				break;
			case 12:
				return "–¥–µ–∫–∞–±—Ä—å";
				break;
			default:
				return "";
				break;
		}
	}
	
Object.freeze(Edit);

//======================================================
//–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//======================================================
	
//======================================================
//–§—É–Ω–∫—Ü–∏–∏
//======================================================

//------------------------------------------------------
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á—ë—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
//------------------------------------------------------
function countPayments(arrPayments, dte) {
	
	//–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	var total = {};
		total.income = 0;
		total.outcome = 0;
		total.balance = 0;
	var incCategory = {};
		incCategory.salary = 0;
		incCategory.add_income = 0;
		incCategory.correction = 0;
		incCategory.other = 0;
	var outCategory = {};
		outCategory.food = 0;
		outCategory.health = 0;
		outCategory.service = 0;
		outCategory.transport = 0;
		outCategory.rest = 0;
		outCategory.things = 0;
		outCategory.correction = 0;
		outCategory.other = 0;
	
	var currentYear = dte.getFullYear();
	var currentMonth = dte.getMonth();
	
	//–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
	for (i=0; i<arrPayments.length; i++) {
		
		var payment = arrPayments[i];
		var paymentYear = payment.field(LPAYMENTS_FLD.DATE).getFullYear();
		var paymentMonth = payment.field(LPAYMENTS_FLD.DATE).getMonth();
		var paymentType = payment.field(LPAYMENTS_FLD.TYPE);
		var paymentCategory, sum;
		if (paymentType == LPAYMENTS_VAL.INCOME) {
			paymentCategory = payment.field(LPAYMENTS_FLD.INC_CATEGORY);
			sum = payment.field(LPAYMENTS_FLD.INCOME);
		}
		if (paymentType == LPAYMENTS_VAL.OUTCOME) {
			paymentCategory = payment.field(LPAYMENTS_FLD.OUT_CATEGORY);
			sum = payment.field(LPAYMENTS_FLD.OUTCOME);
		}
		
		//–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–∞—Ç—É
		if (paymentYear == currentYear && paymentMonth == currentMonth) {
			
			//–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–∫–æ–π –ø–ª–∞—Ç—ë–∂
			if (paymentType == LPAYMENTS_VAL.INCOME) {
				total.income = total.income + sum;
				switch (paymentCategory) {
					case LPAYMENTS_VAL.SALARY:
						incCategory.salary = incCategory.salary + sum;
						break;
					case LPAYMENTS_VAL.ADD_INCOME:
						incCategory.add_income = incCategory.add_income + sum;
						break;
					case LPAYMENTS_VAL.CORRECTION:
						incCategory.correction = incCategory.correction + sum;
						break;
					case LPAYMENTS_VAL.OTHER:
						incCategory.other = incCategory.other + sum;
						break;
				}
			} else if (paymentType == LPAYMENTS_VAL.OUTCOME) {
				total.outcome = total.outcome + sum;
				switch (paymentCategory) {
					case LPAYMENTS_VAL.FOOD:
						outCategory.food = outCategory.food + sum;
						break;
					case LPAYMENTS_VAL.HEALTH:
						outCategory.health = outCategory.health + sum;
						break;
					case LPAYMENTS_VAL.SERVICE:
						outCategory.service = outCategory.service + sum;
						break;
					case LPAYMENTS_VAL.TRANSPORT:
						outCategory.transport = outCategory.transport + sum;
						break;
					case LPAYMENTS_VAL.REST:
						outCategory.rest = outCategory.rest + sum;
						break;
					case LPAYMENTS_VAL.THINGS:
						outCategory.things = outCategory.things + sum;
						break;
					case LPAYMENTS_VAL.CORRECTION:
						outCategory.correction = outCategory.correction + sum;
						break;
					case LPAYMENTS_VAL.OTHER:
						outCategory.other = outCategory.other + sum;
						break;
				}
			}
		}
		
		total.balance = total.income - total.outcome;
	}
	
	return {
		ttl: total,
		inc: incCategory,
		out: outCategory,
	};
	
}
//------------------------------------------------------
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
//------------------------------------------------------
function check() {
	
	//—Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç
	var report = entry();
	
	var currentDate = report.field(LANALYTICS_FLD.STARTDATE);
	currentDate = currentDate.setDate(1);
	report.set(LANALYTICS_FLD.STARTDATE, currentDate);
	
};

//------------------------------------------------------
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞
//------------------------------------------------------
function getPeriod() {
	
	//—Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç
	var report = entry();
	
	var currentDate = report.field(LANALYTICS_FLD.STARTDATE);
	var currentYear = currentDate.getFullYear();
	var currentMonth = currentDate.getMonth();
	currentMonth = Edit.getMonthName(currentMonth);
	
	return currentMonth + " " + currentYear;
	
};

//------------------------------------------------------
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞
//------------------------------------------------------
function getReport() {
	
	//—Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç
	var report = entry();
	
	var currentDate = report.field(LANALYTICS_FLD.STARTDATE);
	
	//–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
	var lPayments = libByName(LPAYMENTS);
	var payments = lPayments.entries();
	
	//—Ä–µ–∑—É–ª—å—Ç–∞—Ç
	var res = countPayments(payments, currentDate);
	report.set(LANALYTICS_FLD.BALANCE, res.ttl.balance);
	report.set(LANALYTICS_FLD.INCOME, res.ttl.income);
	report.set(LANALYTICS_FLD.OUTCOME, res.ttl.outcome);
	
};
